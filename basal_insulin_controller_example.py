def basal_insulin_controller_example(model, x0, tau, time_index, inputs_, xss, uss, dss):
    """
    Implements the default basal rate handler: "if G < 90 mg/dl, deliver basal = 0; otherwise, deliver basal = default_rate U/min".

    Parameters
    ----------
    glucose: np.ndarray
        An array vector as long the simulation length containing all the simulated glucose concentrations (mg/dl)
        up to time_index. The values after time_index should be ignored.
    meal_announcement: np.ndarray
        An array vector as long the simulation length containing all the meal announcements (g) up to time_index.
        The values after time_index should be ignored.
    meal_type: np.ndarray
        An array of strings as long the simulation length containing the type of each meal.
        If scenario is `single-meal`, labels can be:
            - `M`: main meal
            - `O`: other meal
        If scenario is `multi-meal`, labels can be:
            - `B`: breakfast
            - `L`: lunch
            - `D`: dinner
            - `S`: snack
            - `H`: hypotreatment
        The values after time_index should be ignored.
    hypotreatments: np.ndarray
        An array vector as long the simulation length containing all the hypotreatment intakes (g/min) up to time_index.
        If the scenario is single meal, hypotreatments will contain only the hypotreatments generated by this function
        during the simulation. If the scenario is multi-meal, hypotreatments will ALSO contain the hypotreatments already
        present in the given data that labeled as such. The values after time_index should be ignored.
    bolus: np.ndarray
        An array vector as long the simulation length containing all the insulin boluses (U/min) up to time_index.
        The values after time_index should be ignored.
    basal: np.ndarray
        An array vector as long the simulation length containing all the insulin basal (U/min) up to time_index.
        The values after time_index should be ignored.
    time: np.ndarray
        An array vector as long the simulation length containing the time corresponding to the current step (hours) up to time_index.
        The values after time_index should be ignored.
    time_index: int
        The index corresponding to the previous simulation step of the replay simulation.
    dss: DSS
        An object that represents the hyperparameters of the integrated decision support system.

    Returns
    -------
    b: float
        The basal insulin rate to administer at time[time_index+1].
    dss: DSS
        An object that represents the hyperparameters of the integrated decision support system.
        dss is also an output since it contains basal_handler_params that beside being a
        dict that contains the parameters to pass to  this function, it also serves as memory area.
        It is possible to store values inside it and the default_basal_handler function will be able
        to access to them in the next call of the function.

    """

    b = dss.basal_handler_params['default_rate']

    # If G < 90...
    if x0[0] < 90:
        # ...set basal rate to 0
        b = 0

    return b, dss